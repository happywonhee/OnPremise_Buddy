clear
echo "
 _______  _______  _______           _______    _______  _        _______    __ 
(  ____ \(  ____ )(  ___  )|\     /|(  ____ )  (  ___  )( (    /|(  ____ \  /  \
| (    \/| (    )|| (   ) || )   ( || (    )|  | (   ) ||  \  ( || (    \/  \/) )
| |      | (____)|| |   | || |   | || (____)|  | |   | ||   \ | || (__        | |
| | ____ |     __)| |   | || |   | ||  _____)  | |   | || (\ \) ||  __)       | |
| | \_  )| (\ (   | |   | || |   | || (        | |   | || | \   || (          | |
| (___) || ) \ \__| (___) || (___) || )        | (___) || )  \  || (____/\  __) (_
(_______)|/   \__/(_______)(_______)|/         (_______)|/    )_)(_______/  \____/

 _______           _______  _        _          _______  _______  _______ _________ _______ _________
(  ____ \|\     /|(  ____ \( \      ( \        (  ____ \(  ____ \(  ____ )\__   __/(  ____ )\__   __/
| (    \/| )   ( || (    \/| (      | (        | (    \/| (    \/| (    )|   ) (   | (    )|   ) (
| (_____ | (___) || (__    | |      | |        | (_____ | |      | (____)|   | |   | (____)|   | |
(_____  )|  ___  ||  __)   | |      | |        (_____  )| |      |     __)   | |   |  _____)   | |
      ) || (   ) || (      | |      | |              ) || |      | (\ (      | |   | (         | |
/\____) || )   ( || (____/\| (____/\| (____/\  /\____) || (____/\| ) \ \_____) (___| )         | |
\_______)|/     \|(_______/(_______/(_______/  \_______)(_______/|/   \__/\_______/|/          )_(

"

sleep 2
clear

echo "                                                                                                           `date`"
 echo "──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"
echo "                                                               보 안 점 검 보 고 서                          "
 echo "──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"
echo ""
echo "                                       항목에 따라 시간이 다른 항목에 비하여 다소 오래 걸릴수 있습니다  "
echo -e "                                              \033[1;37m 점검 보고서는\033[1;32msecurity.txt \033[1;37m파일로 저장됩니다                      "
echo "                                        점검기준은 [기술적 취약점 분석·평가 방법 상세 가이드]입니다.     "
echo ""
echo ""

sleep 2

echo  "────────────────────────────────────────────────────────────◆    시 스 템  정 보   ◆──────────────────────────────────────────────────────"
echo " "
echo " ▶  IP 주소       : " `hostname -I`
echo " ▶  운영체제      : " `head -n 1 /etc/centos-release`
echo " ▶  커널 버전     : " `uname -r`
echo " ▶  사용자 명     : " `whoami`
echo ""
sleep 2
clear
echo "─────────────────────────────────────────────────────────────◆    점  검  결  과    ◆──────────────────────────────────────────────────────"
sleep 1



function showTitle()

{

   echo " ◆ $1 ◆"

}



function showEndline()
{

    echo " "
 
    echo "──────────────────────────────────────────────────────────────────────────────────────────────"
 
    echo "  " 
}

function weak(){

echo -e "\033[1;31m>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   취   약   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< \033[0m"

echo ""
}

function good(){

echo -e "\033[1;32m>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   양   호   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< \033[0m"

}

# ===========================================================================================

showTitle "계정관리 : group 파일 권한 설정"
echo " "
echo "▶ 양 호 : 파일 소유자 root, 권한이 644 이하"
echo "▶ 취 약 : 파일 소유자 root, 권한이 644 이하"
echo " "
pch=`ls -l /etc/passwd | cut -b 1-10` #현재 소유자 저장
och="-rw-r--r--" # 적용되어야 될 권한 저장

pch2=`ls -l /etc/passwd | cut -d " " -f3` # 현재 소유권 저장
p="root" # 적용되어야 될 소유권 저장

if [ $pch != $och ] && [ $pch2 != $p ]; then        
        weak
        echo "※ 소유자를 root로 설정하십시오."
        echo "※ 파일 권한을 644로 설정하십시오."
elif [ $pch != $och ]; then
        # 소유권에 대한 취약점이 존재할  동작
        weak
        echo "※ 파일 권한을 644로 설정하십시오."
elif [ $pch2 != $p ];  then
         # 소유주에 대한 취약점이 존재할  동작
        weak
        echo "※ 파일 소유자를 root로 설정하십시오."
else
         # 권한이 모두 이상이 없을 때 동작
        good

fi
showEndline

#================================================================================

showTitle "계정관리 : root 계정 원격 접속 제한"
echo " "
echo "▶ 양 호 : root계정 SSH 차단"
echo "▶ 취 약 : root계정 SSH 허용"
echo " "
SERVICE2=sshd.service
systemctl is-active $SERVICE2 >/dev/null 2>&1

if [ $? = 0 ]; then
        SSHVALUE=$(cat /etc/ssh/sshd_config | grep 'PermitRootLogin yes' | \
        awk {'print $2'} | sed '/the/d')
       if [ $SSHVALUE == "yes" ];  then
      weak
                echo "※ root의 원격접속을 차단해주십시오."

        else
      good

        fi

fi
showEndline

#==========================================================================

showTitle "계정관리 : 계정 잠금 임계값 설정"
echo " "
echo "▶ 양 호 : 계정 잠금 임계값이 5회 이하"
echo "▶ 취 약 : 계정 잠금 임계값이 설정되어 있지 않거나, 5회 이하의 값이 아님"
echo " "
FILE=/etc/pam.d/system-auth

PAM_MODULE=pam_tally.so
LINE1=`cat $FILE | egrep -v '(^#|^$)' | grep '^auth' | grep $PAM_MODULE`
if [ $? -ne 0 ] ; then
 
  weak
  echo "※ 계정 잠금 임계값이 설정되어 있지 않습니다."
  echo "※ 계정 잠금 임계값을 설정하여 주십시오."

else

LINE2=`echo $LINE1 | cut -d ' ' -f 4-`
for VAR in `echo $LINE2`
do

CHECK1=`echo $VAR | awk -F= '{print $1}'`
CHECK2=`echo $VAR | awk -F= '{print $2}'`

case $CHECK1 in
deny) if [ $CHECK2 -lt 5 ] ; then
  good

else
     weak
   echo "※ 계정 잠금임계값을 5회 이하로 설정하여 주십시오."
fi ;;
*) ;;
esac
done
fi
showEndline

#==========================================================================

showTitle "계정관리 : Session Timeout 설정"
echo "  "
echo "▶ 양 호 : Session Timeout이 100초 (10분) 이하 "
echo "▶ 취 약 : Session Timeout이 100초 (10분)가 아님 "
echo "   "
TARGET1=/etc/profile

if [[ -e $TARGET1 ]]; then
    CHECK1=$(grep 'TMOUT=300' $TARGET1 | grep -v '#')
    if [[ -n $CHECK1 ]]; then
    good
   else
    weak
    echo "※ export TMOUT 내용이 추가 되어있지않습니다."
    echo "※ 아래 내용을 추가해주십시오. (단,100초이하)"
    echo "     export TMOUT=300"
    echo "     $TARGET1 파일 없음"
    fi
fi
showEndline

#========================================================================
sleep 2
showTitle "계정관리 : root 계정 su 제한"
echo "  "
echo "▶ 양 호 : su 명령어를 특정 그룹에 속한 사용자만 사용하도록 제한"
echo "▶ 취 약 : su 명령어를 모든 사용자가 사용하도록 설정"
echo "   "
TARGET1=/etc/pam.d/su
CHECK1=$(grep pam_wheel.so $TARGET1 | grep -v '#')
if [[ -n $CHECK1 ]]; then
   good
else
   weak
    echo "※ 아래의 내용이 추가가 되어있지 않습니다."
    echo "※ 아래 내용을  추가해주십시오."
    echo "     auth        required    pam_wheel.so use_uid"
    echo "     auth        sufficient   pam_wheel.so trust use_uid"
    echo "     $TARGET1 파일 없음"
fi
showEndline

#===================================================================================

showTitle "계정관리 : 패스워스 복잡성 설정 및 최소길이 설정"
echo "  "
echo "▶ 양 호 : 영문,숫자,특수문자를 조합하여 8자리 이상 패스워드 "
echo "▶ 취 약 : 영문,숫자,특수문자를 조합하여 8자리 미만 패스워드 "
echo "   "
TARGET1=/etc/login.defs
CHECK1=$(awk '$1 == "PASS_MIN_LEN" && $2 {print $0}' $TARGET1)
CHECK2=$(awk '$1 == "PASS_MIN_LEN" && $2 {print $2}' $TARGET1)
if [[ 8 -le $CHECK2 ]]; then
   good
else
    weak
    echo "※ 패스워드가 8자리 미만으로 되어있습니다."
    echo "※ 패스워드는 8자리 이상 으로 설정해주십시오."
    echo "     $CHECK1"
fi
showEndline

#==============================================================================

showTitle "계정관리 : 패스워스 최대 사용기간 설정"
echo "  "
echo "▶ 양 호 : 패스워드 최대 사용기간이 90일(12주) 이하로 설정"
echo "▶ 취 약 : 패스워드 최대 사용기간이 90일(12주) 이하로 설정되어있지 않음"
echo "   "
TARGET1=/etc/login.defs
CHECK1=$(awk '$1 == "PASS_MAX_DAYS" && $2 {print $0}' $TARGET1)
CHECK2=$(awk '$1 == "PASS_MAX_DAYS" && $2 {print $2}' $TARGET1)
if [[ 95 -ge $CHECK2 ]]; then
   good
else
   weak
       echo "※ 95일 초과로 설정되있습니다."
       echo "※ 95일 이하로 설정해주십시오."
       echo "     $CHECK1"
fi

showEndline

#===============================================================================

showTitle "계정관리 : 패스워드 최소 사용기간 설정"
echo "  "
echo "▶ 양 호 : 패스워드 최소 사용기간이 1일 이상 설정 "
echo "▶ 취 약 : 패스워드 최소 사용기간이 1일 미만 설정되어있지 않음 "
echo "   "
TARGET1=/etc/login.defs
CHECK1=$(awk '$1 == "PASS_MIN_DAYS" && $2 {print $0}' $TARGET1)
CHECK2=$(awk '$1 == "PASS_MIN_DAYS" && $2 {print $2}' $TARGET1)
if [[ 1 -le $CHECK2  ]]; then
   good
else
   weak
       echo "※ 1일 미만으로 설정되어있습니다."
       echo "※ 1일 이상으로 설정해주십시오."
       echo "     `cat /etc/login.defs | grep "PASS_MIN_DAYS" | egrep -v '(^#|^$)'`"

fi

showEndline

#================================================================================

showTitle "계정관리 : 패스워드 파일 보호"
echo "  "
echo " ▶ 양 호 : shadow 패스워드를 사용하거나, 패스워드를 암호화하여 저장"
echo " ▶ 취 약 : shadow 패스워드를 사용하지 않고, 패스워드를 암호화하여 저장하지 않음"
echo "  "
if [ `ls /etc | grep -x "shadow" | wc -l` -eq 1 ]
then
if [ `cat /etc/passwd | cut -d ":" -f 2 | grep -v "x" | wc -l` -gt 0 ]
then
weak
       echo "※ passwd 파일에 2번째 필드가 x가 아니므로 수정하십시오."
else
good
fi
else
weak
       echo "※ shadow 파일이 없으므로 확인해주십시오."
fi
showEndline

#==============================================================================
sleep 2
showTitle "계정관리 : 관리자 그룹에 최소한의 계정 포함"
echo "  "
echo "▶ 양 호 : 관리자 그룹에 불필요한 계정이 등록되어 있지 않음"
echo "▶ 취 약 : 관리자 그룹에 불필요한 계정이 등록되어 있음"
echo "  "
if [ -f /etc/group ]
  then
     cat /etc/group | grep "root:"
  else
    weak
      echo "※ /etc/group 파일이 없습니다."
      echo "※ /etc/group 파일을 확인해주십시오."
fi

if [ `cat /etc/group | grep "root:" | grep ":root," | wc -l` -eq 0 ]
  then
     good
  else
      weak
      echo "※ root 계정에 불필요한 계정이 등록되어있는지 확인해주십시오."
fi
showEndline

#==============================================================================

showTitle "계정관리 : 사용자 shell 점검"
echo "  "
echo "▶ 양 호 : 로그인이 가능한 서비스 계정이 존재하지 않음"
echo "▶ 취 약 : 로그인이 가능한 서비스 계정이 존재함"
echo "  "
check=`cat /etc/passwd | egrep "^daemon|^bin|^sys|^listen|^nobody|^nobody4|^noaccess|^diag|^operator|^games|^gopher|^ftp|^sshd|grep -v admin" | cut -d ':' -f 7`

no="/sbin/nologin"
fa="/sbin/false"

for i in $check 
  do
     if [ $i != $no ] || [ $i != $fa ]; then
        a=1
     fi
  done

if [ $a -ne 1 ];then
   weak
   echo "※ 로그인이 가능한 서비스 계정을 삭제하십시오."
else
   good
fi

showEndline

#==========================================================================

showTitle "계정관리 : root 이외의 UID가 ‘0’금지"
echo ""
echo "▶ 양 호 : root 이외의 UID가 0인 사용자 존재하지 않음"
echo "▶ 취 약 : root 이외의 UID가 0인 사용자 존재함"
echo ""
check=`cat /etc/passwd | awk -F ":" '$3==0{print $1}' | wc -l`
if [ $check -le 1 ]; then
   good
else
        weak
   echo "※ UID가 0인 유저를 제거하십시오."
fi
showEndline

#==========================================================================

showTitle "파일 및 디렉터리 관리 : /etc/hosts 파일 소유자 및 권한 설정"
echo " "
echo "▶ 양 호 : 파일 권한이 644 및 파일 소유자가 root"
echo "▶ 취 약 : 파일 권한이 644가 아니거나 소유자가 root가 아님"
echo " "
pch=`ls -l /etc/hosts | cut -b 1-10` #현재 소유자 저장
och="-rw-r--r--" # 적용되어야 될 권한 저장

pch2=`ls -l /etc/hosts | cut -d " " -f3` # 현재 소유권 저장
p="root" 

if [ $pch != $och ] && [ $pch2 != $p ]; then       
        weak
        echo "※ /etc/host 파일 권한을 644로 설정하십시오."
        echo "※ /etc/host 파일 소유자를 root로 설정하십시오."
elif [ $pch != $och ]; then
        weak
        echo "※ /etc/host 파일 권한을 644로 설정하십시오."
elif [ $pch2 != $p ];  then
        weak
        echo "※ /etc/host 파일 소유자를 root로 설정하십시오."
else
        good

fi
showEndline

#================================================

showTitle "파일 및 디렉터리 관리 : /etc/passwd 파일 소유자 및 권한 설정"
echo " "
echo "▶ 양 호 : 파일 권한이 644 및 파일 소유자가 root"
echo "▶ 취 약 : 파일 권한이 644가 아니거나 소유자가 root가 아님"
echo " "

pch=`ls -l /etc/passwd | cut -b 1-10` #현재 소유자 저장
och="-rw-r--r--" # 적용되어야 될 권한 저장

pch2=`ls -l /etc/passwd | cut -d " " -f3` # 현재 소유권 저장
p="root" # 적용되어야 될 소유권 저장

if [ $pch != $och ] && [ $pch2 != $p ]; then        # 모든 권한에 대한 취약점이 존재할 경우 동작
        weak
        echo  "※ 파일 권한을 644로 설정하십시오."
        echo  "※ 파일 소유자를 root로 설정하십시오."
elif [ $pch != $och ]; then
        weak
        echo  "※ 파일 권한을 644로 설정하십시오."
elif [ $pch2 != $p ];  then
        weak
        echo  "※ 파일 소유자를 root로 설정하십시오."
else
        good
fi
showEndline

#==============================================

sleep 2
showTitle "파일 및 디렉터리 관리 : /etc/shadow 파일 소유자 및 권한 설정"

echo " "
echo "▶ 양 호 : 파일 소유자가 root 및 파일 권한이 400"
echo "▶ 취 약 : 파일 소유자가 root가 아니거나 파일 권한이 400이 아님"
echo " "

pch=`ls -l /etc/shadow | cut -b 1-10` #현재 소유자 저장
och="-rw-------" # 적용되어야 될 권한 저장

pch2=`ls -l /etc/shadow | cut -d " " -f3` # 현재 소유권 저장
p="root" # 적용되어야 될 소유권 저장

if [ $pch != $och ] && [ $pch2 != $p ]; then
        weak
        echo "※ 파일 권한을 400, 소유자를 root로 설정하십시오. "
elif [ $pch != $och ]; then
        # 소유권에 대한 취약점이 존재할 경우 동작
        weak
        echo "※ 파일 권한을 400으로 설정하십시오. "
elif [ $pch2 != $p ];  then
        weak
        echo "※ 파일 소유자를 root로 설정하십시오. "
else
         # 권한이 모두 이상이 없을 때 동작
        good

fi

showEndline

#==============================================
showTitle "파일 및 디렉터리 관리 : /etc/rsyslog.conf 파일 소유자 및 권한 설정"

echo " "
echo "▶ 양 호 : /etc/rsyslog.conf의 파일 권한이 644 및 소유주가 root로 설정"
echo "▶ 취 약 : /etc/rsyslog.conf의 파일 권한이 644가 아니거나 소유자가 root가 아님"
echo " "

pch=`ls -l /etc/rsyslog.conf | cut -b 1-10` 
och="-rw-r--r--" # 적용되어야 될 권한 저장

pch2=`ls -l /etc/rsyslog.conf | cut -d " " -f3` 
p="root" # 적용되어야 될 소유권 저장

if [ $pch != $och ] && [ $pch2 != $p ]; then   
        weak
        echo "※ /etc/rsylog.con 권한을 644, 소유자를 root로 설정하십시오. "
elif [ $pch != $och ]; then
        weak
        echo "※ /etc/rsylog.con 권한을 644로 설정하십시오."
elif [ $pch2 != $p ];  then
        weak
        echo "※ /etc/rsylog.con 소유자를 root로 설정하십시오."
else
        good
fi

showEndline

#====================================================

showTitle "파일 및 디렉터리 관리 : 파일 및 디렉터리 소유자 설정"

echo ""
echo "▶ 양 호 : 소유주, 소유권 없는 파일.디렉터리가 없음 "
echo "▶ 취 약 : 소유주, 소유권 없는 파일.디렉터리가 존재 "
echo ""

Result=`find / -nouser -o -nogroup -print 2> /dev/null`

if [ -z $Result ]
then
        good
else
        weak
        echo "※ 소유쥬, 권한이 없는 파일, 디렉터리를 제거하세요."
fi

showEndline

#====================================================

showTitle "hosts.equiv 파일의 권한 설정"

echo " "
echo "▶ 양 호 : hosts.equiv 파일이 존재하지 않거나 권한이 400으로 설정"
echo "▶ 취 약 : hosts.equiv 파일이 존재하며 권한이 400으로 설정되지 않음"
echo " "

TARGET1=/etc/hosts.equiv
CHECK1=$(find /etc/ -name hosts.equiv -perm 400)
if [[ -e $TARGET1 ]]; then
        if [[ -n $CHECK1 ]]; then
                good
        else
                weak
                echo "※ $TARGET1 파일의 권한을 400으로 설정하십시오."
        fi
else
        good
fi

showEndline

#================================================

showTitle "파일 및 디렉터리 관리 : root홈, 패스 디렉터리 권한 및 패스 설정"

echo " "
echo "▶ 양 호 : PATH 환경변수의 중간 혹은 앞에 .가 포함"
echo "▶ 취 약 : PATH 환경변수의 중간 혹은 앞에 .가 포함되어 있지 않음"
echo " "

FRAME=$( echo $PATH | egrep "\.:|::|:.:" )

if [ -z $FRAME ]; then
        good
else
        weak
        echo "※ PATH 환경변수에 .이 포함되지 않도록 수정하십시오"
fi

showEndline

#===============================================

showTitle "파일 및 디렉터리 관리 : UMASK 설정 관리"

echo " "
echo "▶ 양 호 : /etc/profile, /etc/bashrc 파일의 umask 022"
echo "▶ 취 약 : /etc/profile, /etc/bashrc 파일의 umask 022 설정되지 않음"
echo " "

CHECK1=$(egrep 'umask 022' /etc/profile /etc/bashrc | wc -l)

if [[ 2 -eq $CHECK1 ]]; then
        good

else
        weak
        echo "※ /etc/profile, /etc/bashrc umask 022로 설정하십시오"
fi

showEndline

#===============================================

sleep 2

showTitle "/etc/(x)inetd.conf 파일의 쓰기 권한 설정"

echo " "
echo "▶ 양 호 : root가 아닌 대상에게 쓰기작업이 차단"
echo "▶ 취 약 : root가 아닌 대상에게 쓰기작업이 허용"
echo " "

CHECK1=`$(find /etc/xinetd* -type f -perm -2)`
if [[ -z $CHECK1 ]]; then
        good
else
        weak
        echo "※ root가 아닌 대상에 대한 쓰기 권한을 차단하십시오"
fi

showEndline

#===========================================

showTitle "서비스 관리 : crond 파일 소유자 및 권한 설정"

echo " "
echo "▶ 양 호 : cron 접근제어 파일 소유자 root, 권한이 640 이하"
echo "▶ 취 약 : 접근제어 파일 소유자가 root가 아니거나 권한이 640 초과"
echo " "

CHECK=$(find /etc -name "*cron.*" -type f -perm -2)
DENY=`ls -ld /etc/cron.deny  | cut -f "3" -d " " `
FILE=/etc/cron.allow

 if [[ -f "$FILE" ]]; then
        if [[ -z $CHECK ]]; then
                ALLOW=`ls -ld /etc/cron.allow | cut -f "3" -d " "`
                if [[ $DENY != "root" || $ALLOW != "root" ]]; then
                    weak
        echo "=> cron 접근 제어 파일 권한을 확인해 주십시오."
        for DIR in `find /etc -name "*cron.*" -type f`
        do
        echo `ls -ld $DIR`
        done
                else
                    good
                fi
        else
                   weak
        echo "※ cron 접근 제어 파일 권한을 확인해 주십시오."
        for DIR in `find /etc -name "*cron.*" -type f`
           do
              echo `ls -ld $DIR`
           done
        fi
else
        if [[ -z $CHECK && $DENY == "root" ]]; then
                good
         else
                weak
        echo "※ cron 접근 제어 파일 권한을 확인해 주십시오."
        for DIR in `find /etc -name "*cron.*" -type f`
           do
              echo `ls -ld $DIR`
           done
        fi
fi
showEndline

#===============================================

showTitle "서비스 관리 : DNS 보안 버전 패치"

echo " "
echo "▶ 양 호 : DNS가 최신 버전"
echo "▶ 취 약 : DNS가 이전 버전"
echo " "

newversion="9.11.4"
cversion=`named -v 2>/dev/null | awk -F " " '{print $2}' | cut -c1-6`

if [ -z $cversion ]; then
        weak
        echo "※ DNS 설치 해주십시오."

elif [ $cversion != $newversion ]; then
        weak
        echo "※ DNS를 최신 버전으로 설치하세요."
else
        good
fi

showEndline

#===============================================

showTitle "서비스 관리 : NFS 접근 통제"

echo " "
echo "▶ 양 호 : NFS 서비스 사용 시 everyone 공유 제한"
echo "▶ 취 약 : NFS 서비스 사용시  everyone 공유 제한을 하지 않음"
echo " "
CHECK1=`cat /etc/exports | grep '*'`
CHECK2=`cat /etc/exports | grep 'no_root_squash'`
CHECK3=`cat /etc/exports | grep 'no_all_squash'`
if [[ -z $CHECK1 && -z $CHECK2 && -z $CHECK3 ]]; then
   good
else
   weak
      echo "※ NFS 접근 허가의 보안 상태가 취약합니다."
      echo "※ /etc/fstab 파일을 확인하여 주십시오. ( *, no_root_sqaush, no_all_squash 제거 권고 )"

fi
showEndline

#===============================================

showTitle "서비스 관리 :  NFS 서비스 비활성화"

echo " "
echo " ▶ 양 호 : 불필요한 NFS 서비스 관련 데몬 비활성화"
echo " ▶ 취 약 : 불필요한 NFS 서비스 관련 데몬 활성화"
echo " "

CHECK1=$(ps -ef | egrep 'nfsd|statd|mountd' | grep -v pts)
FILE=`cat /etc/exports | cut -f 1 -d " " | xargs echo | sed 's/ /,/g'`
if [[ -z $CHECK1 ]]; then
   good   
else
   weak
       echo " "
        echo "    ※ NFS를 사용하지 않는 경우 서비스를  비활성화해 주십시오."
        echo "        pkill -9 {nfsd, statd. mountd}"
        echo "    ※ NFS 를 사용하지 않는 경우 사용하지 않는 공유를 제거하십시오."
        echo "        umount [디렉토리명]"
fi
showEndline

#===============================================


showTitle "패치 관리 : 최신 보안 패치 및 벤더 권고 사항 적용"
echo " "
echo " ▶ 양 호 : 주기적으로 보안 패치 및 벤더 권고사항을 적용"
echo " ▶ 취 약 : 주기적으로 보안 패치 및 벤더 권고사항을 적용하지 않음"
echo " "
 echo -e "\033[1;32m>>>>>>>>>>>>>>>>>>>>>>> 설 치 된   보 안 패 치 확 인 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< \033[0m"
echo " "
echo "※ 최신 보안 패치를 확인하시고 보안 패치 업그레이드를 진행해 주십시오. "
echo ""
echo "<현재 보안 패치 버전 확인>"
yum updateinfo list security all
showEndline

#===============================================

showTitle "로그 관리 : 로그의 정기적 검토 및 보고"

echo " "
echo  " ▶ 양 호 : 정기적으로 로그 기록에 대한 검토, 분석, 리포트 작성 및 보고 등의 조치가 이루어짐"
echo  " ▶ 취 약 : 로그 기록에 대한 검토, 분석, 리포트 작성 및 보고 등의 조치가 이루어지지 않음"
echo " "

echo -e "\033[1;32m>>>>>>>>>>>>>>>>>>>>>>   로 그 백 업 이   완 료 되 었 습 니 다   <<<<<<<<<<<<<<<<<<<<<<<<<<<<< \033[0m"
echo " "

DIR=`find / -name LOG -type d`

if [[ -z $DIR ]]; then
        mkdir /LOG
        TAR=`tar cfzP /LOG/log.$(date '+%Y-%m-%d').tar.gz /var/log/*`
         DEL=`find /LOG/ -name "*.tgz" -mtime +4 -delete`
        $TAR
        $DEL
        ls -l /LOG
else
        $TAR
        $DEL
        ls -ld /LOG/*log*
fi

#########################################################함수 영역################### #########################################

function sending(){

echo "─────────────────────────────────────────────────────────────◆    점  검  결  과    ◆──────────────────────────────────────────────────────"


function showTitle()

{

   echo " ◆ $1 ◆"

}



function showEndline()
{

    echo " "
 
    echo "──────────────────────────────────────────────────────────────────────────────────────────────"
 
    echo "  " 
}

function weak(){

echo -e "\033[1;31m>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   취   약   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< \033[0m"

echo ""
}

function good(){

echo -e "\033[1;33m>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   양   호   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< \033[0m"

}

# ===========================================================================================

showTitle "계정관리 : group 파일 권한 설정"
echo " "
echo "▶ 양 호 : 파일 소유자 root, 권한이 644 이하"
echo "▶ 취 약 : 파일 소유자 root, 권한이 644 이하"
echo " "
pch=`ls -l /etc/passwd | cut -b 1-10` #현재 소유자 저장
och="-rw-r--r--" # 적용되어야 될 권한 저장

pch2=`ls -l /etc/passwd | cut -d " " -f3` # 현재 소유권 저장
p="root" # 적용되어야 될 소유권 저장

if [ $pch != $och ] && [ $pch2 != $p ]; then        
        weak
        echo "※ 소유자를 root로 설정하십시오."
        echo "※ 파일 권한을 644로 설정하십시오."
elif [ $pch != $och ]; then
        # 소유권에 대한 취약점이 존재할  동작
        weak
        echo "※ 파일 권한을 644로 설정하십시오."
elif [ $pch2 != $p ];  then
         # 소유주에 대한 취약점이 존재할  동작
        weak
        echo "※ 파일 소유자를 root로 설정하십시오."
else
         # 권한이 모두 이상이 없을 때 동작
        good

fi
showEndline

#================================================================================

showTitle "계정관리 : root 계정 원격 접속 제한"
echo " "
echo "▶ 양 호 : root계정 SSH 차단"
echo "▶ 취 약 : root계정 SSH 허용"
echo " "
SERVICE2=sshd.service
systemctl is-active $SERVICE2 >/dev/null 2>&1

if [ $? = 0 ]; then
        SSHVALUE=$(cat /etc/ssh/sshd_config | grep 'PermitRootLogin yes' | \
        awk {'print $2'} | sed '/the/d')
       if [ $SSHVALUE == "yes" ];  then
      weak
                echo "※ root의 원격접속을 차단해주십시오."

        else
      good

        fi

fi
showEndline

#==========================================================================

showTitle "계정관리 : 계정 잠금 임계값 설정"
echo " "
echo "▶ 양 호 : 계정 잠금 임계값이 5회 이하"
echo "▶ 취 약 : 계정 잠금 임계값이 설정되어 있지 않거나, 5회 이하의 값이 아님"
echo " "
FILE=/etc/pam.d/system-auth

PAM_MODULE=pam_tally.so
LINE1=`cat $FILE | egrep -v '(^#|^$)' | grep '^auth' | grep $PAM_MODULE`
if [ $? -ne 0 ] ; then
 
  weak
  echo "※ 계정 잠금 임계값이 설정되어 있지 않습니다."
  echo "※ 계정 잠금 임계값을 설정하여 주십시오."

else

LINE2=`echo $LINE1 | cut -d ' ' -f 4-`
for VAR in `echo $LINE2`
do

CHECK1=`echo $VAR | awk -F= '{print $1}'`
CHECK2=`echo $VAR | awk -F= '{print $2}'`

case $CHECK1 in
deny) if [ $CHECK2 -lt 5 ] ; then
  good

else
     weak
   echo "※ 계정 잠금임계값을 5회 이하로 설정하여 주십시오."
fi ;;
*) ;;
esac
done
fi
showEndline

#==========================================================================

showTitle "계정관리 : Session Timeout 설정"
echo "  "
echo "▶ 양 호 : Session Timeout이 100초 (10분) 이하 "
echo "▶ 취 약 : Session Timeout이 100초 (10분)가 아님 "
echo "   "
TARGET1=/etc/profile

if [[ -e $TARGET1 ]]; then
    CHECK1=$(grep 'TMOUT=300' $TARGET1 | grep -v '#')
    if [[ -n $CHECK1 ]]; then
    good
   else
    weak
    echo "※ export TMOUT 내용이 추가 되어있지않습니다."
    echo "※ 아래 내용을 추가해주십시오. (단,100초이하)"
    echo "     export TMOUT=300"
    echo "     $TARGET1 파일 없음"
    fi
fi
showEndline

#========================================================================

showTitle "계정관리 : root 계정 su 제한"
echo "  "
echo "▶ 양 호 : su 명령어를 특정 그룹에 속한 사용자만 사용하도록 제한"
echo "▶ 취 약 : su 명령어를 모든 사용자가 사용하도록 설정"
echo "   "
TARGET1=/etc/pam.d/su
CHECK1=$(grep pam_wheel.so $TARGET1 | grep -v '#')
if [[ -n $CHECK1 ]]; then
   good
else
   weak
    echo "※ 아래의 내용이 추가가 되어있지 않습니다."
    echo "※ 아래 내용을  추가해주십시오."
    echo "     auth        required    pam_wheel.so use_uid"
    echo "     auth        sufficient   pam_wheel.so trust use_uid"
    echo "     $TARGET1 파일 없음"
fi
showEndline

#===================================================================================

showTitle "계정관리 : 패스워스 복잡성 설정 및 최소길이 설정"
echo "  "
echo "▶ 양 호 : 영문,숫자,특수문자를 조합하여 8자리 이상 패스워드 "
echo "▶ 취 약 : 영문,숫자,특수문자를 조합하여 8자리 미만 패스워드 "
echo "   "
TARGET1=/etc/login.defs
CHECK1=$(awk '$1 == "PASS_MIN_LEN" && $2 {print $0}' $TARGET1)
CHECK2=$(awk '$1 == "PASS_MIN_LEN" && $2 {print $2}' $TARGET1)
if [[ 8 -le $CHECK2 ]]; then
   good
else
    weak
    echo "※ 패스워드가 8자리 미만으로 되어있습니다."
    echo "※ 패스워드는 8자리 이상 으로 설정해주십시오."
    echo "     $CHECK1"
fi
showEndline

#==============================================================================

showTitle "계정관리 : 패스워스 최대 사용기간 설정"
echo "  "
echo "▶ 양 호 : 패스워드 최대 사용기간이 90일(12주) 이하로 설정"
echo "▶ 취 약 : 패스워드 최대 사용기간이 90일(12주) 이하로 설정되어있지 않음"
echo "   "
TARGET1=/etc/login.defs
CHECK1=$(awk '$1 == "PASS_MAX_DAYS" && $2 {print $0}' $TARGET1)
CHECK2=$(awk '$1 == "PASS_MAX_DAYS" && $2 {print $2}' $TARGET1)
if [[ 95 -ge $CHECK2 ]]; then
   good
else
   weak
       echo "※ 95일 초과로 설정되있습니다."
       echo "※ 95일 이하로 설정해주십시오."
       echo "     $CHECK1"
fi

showEndline

#===============================================================================

showTitle "계정관리 : 패스워드 최소 사용기간 설정"
echo "  "
echo "▶ 양 호 : 패스워드 최소 사용기간이 1일 이상 설정 "
echo "▶ 취 약 : 패스워드 최소 사용기간이 1일 미만 설정되어있지 않음 "
echo "   "
TARGET1=/etc/login.defs
CHECK1=$(awk '$1 == "PASS_MIN_DAYS" && $2 {print $0}' $TARGET1)
CHECK2=$(awk '$1 == "PASS_MIN_DAYS" && $2 {print $2}' $TARGET1)
if [[ 1 -le $CHECK2  ]]; then
   good
else
   weak
       echo "※ 1일 미만으로 설정되어있습니다."
       echo "※ 1일 이상으로 설정해주십시오."
       echo "     `cat /etc/login.defs | grep "PASS_MIN_DAYS" | egrep -v '(^#|^$)'`"

fi

showEndline

#================================================================================

showTitle "계정관리 : 패스워드 파일 보호"
echo "  "
echo " ▶ 양 호 : shadow 패스워드를 사용하거나, 패스워드를 암호화하여 저장"
echo " ▶ 취 약 : shadow 패스워드를 사용하지 않고, 패스워드를 암호화하여 저장하지 않음"
echo "  "
if [ `ls /etc | grep -x "shadow" | wc -l` -eq 1 ]
then
if [ `cat /etc/passwd | cut -d ":" -f 2 | grep -v "x" | wc -l` -gt 0 ]
then
weak
       echo "※ passwd 파일에 2번째 필드가 x가 아니므로 수정하십시오."
else
good
fi
else
weak
       echo "※ shadow 파일이 없으므로 확인해주십시오."
fi
showEndline

#==============================================================================

showTitle "계정관리 : 관리자 그룹에 최소한의 계정 포함"
echo "  "
echo "▶ 양 호 : 관리자 그룹에 불필요한 계정이 등록되어 있지 않음"
echo "▶ 취 약 : 관리자 그룹에 불필요한 계정이 등록되어 있음"
echo "  "
if [ -f /etc/group ]
  then
     cat /etc/group | grep "root:"
  else
    weak
      echo "※ /etc/group 파일이 없습니다."
      echo "※ /etc/group 파일을 확인해주십시오."
fi

if [ `cat /etc/group | grep "root:" | grep ":root," | wc -l` -eq 0 ]
  then
     good
  else
      weak
      echo "※ root 계정에 불필요한 계정이 등록되어있는지 확인해주십시오."
fi
showEndline

#==============================================================================

showTitle "계정관리 : 사용자 shell 점검"
echo "  "
echo "▶ 양 호 : 로그인이 가능한 서비스 계정이 존재하지 않음"
echo "▶ 취 약 : 로그인이 가능한 서비스 계정이 존재함"
echo "  "
check=`cat /etc/passwd | egrep "^daemon|^bin|^sys|^listen|^nobody|^nobody4|^noaccess|^diag|^operator|^games|^gopher|^ftp|^sshd|grep -v admin" | cut -d ':' -f 7`

no="/sbin/nologin"
fa="/sbin/false"

for i in $check 
  do
     if [ $i != $no ] || [ $i != $fa ]; then
        a=1
     fi
  done

if [ $a -ne 1 ];then
   weak
   echo "※ 로그인이 가능한 서비스 계정을 삭제하십시오."
else
   good
fi

showEndline

#==========================================================================

showTitle "계정관리 : root 이외의 UID가 ‘0’금지"
echo ""
echo "▶ 양 호 : root 이외의 UID가 0인 사용자 존재하지 않음"
echo "▶ 취 약 : root 이외의 UID가 0인 사용자 존재함"
echo ""
check=`cat /etc/passwd | awk -F ":" '$3==0{print $1}' | wc -l`
if [ $check -le 1 ]; then
   good
else
        weak
   echo "※ UID가 0인 유저를 제거하십시오."
fi
showEndline

#==========================================================================

showTitle "파일 및 디렉터리 관리 : /etc/hosts 파일 소유자 및 권한 설정"
echo " "
echo "▶ 양 호 : 파일 권한이 644 및 파일 소유자가 root"
echo "▶ 취 약 : 파일 권한이 644가 아니거나 소유자가 root가 아님"
echo " "
pch=`ls -l /etc/hosts | cut -b 1-10` #현재 소유자 저장
och="-rw-r--r--" # 적용되어야 될 권한 저장

pch2=`ls -l /etc/hosts | cut -d " " -f3` # 현재 소유권 저장
p="root" 

if [ $pch != $och ] && [ $pch2 != $p ]; then       
        weak
        echo "※ /etc/host 파일 권한을 644로 설정하십시오."
        echo "※ /etc/host 파일 소유자를 root로 설정하십시오."
elif [ $pch != $och ]; then
        weak
        echo "※ /etc/host 파일 권한을 644로 설정하십시오."
elif [ $pch2 != $p ];  then
        weak
        echo "※ /etc/host 파일 소유자를 root로 설정하십시오."
else
        good

fi
showEndline

#================================================

showTitle "파일 및 디렉터리 관리 : /etc/passwd 파일 소유자 및 권한 설정"
echo " "
echo "▶ 양 호 : 파일 권한이 644 및 파일 소유자가 root"
echo "▶ 취 약 : 파일 권한이 644가 아니거나 소유자가 root가 아님"
echo " "

pch=`ls -l /etc/passwd | cut -b 1-10` #현재 소유자 저장
och="-rw-r--r--" # 적용되어야 될 권한 저장

pch2=`ls -l /etc/passwd | cut -d " " -f3` # 현재 소유권 저장
p="root" # 적용되어야 될 소유권 저장

if [ $pch != $och ] && [ $pch2 != $p ]; then        # 모든 권한에 대한 취약점이 존재할 경우 동작
        weak
        echo  "※ 파일 권한을 644로 설정하십시오."
        echo  "※ 파일 소유자를 root로 설정하십시오."
elif [ $pch != $och ]; then
        weak
        echo  "※ 파일 권한을 644로 설정하십시오."
elif [ $pch2 != $p ];  then
        weak
        echo  "※ 파일 소유자를 root로 설정하십시오."
else
        good
fi
showEndline

#==============================================


showTitle "파일 및 디렉터리 관리 : /etc/shadow 파일 소유자 및 권한 설정"

echo " "
echo "▶ 양 호 : 파일 소유자가 root 및 파일 권한이 400"
echo "▶ 취 약 : 파일 소유자가 root가 아니거나 파일 권한이 400이 아님"
echo " "

pch=`ls -l /etc/shadow | cut -b 1-10` #현재 소유자 저장
och="-rw-------" # 적용되어야 될 권한 저장

pch2=`ls -l /etc/shadow | cut -d " " -f3` # 현재 소유권 저장
p="root" # 적용되어야 될 소유권 저장

if [ $pch != $och ] && [ $pch2 != $p ]; then
        weak
        echo "※ 파일 권한을 400, 소유자를 root로 설정하십시오. "
elif [ $pch != $och ]; then
        # 소유권에 대한 취약점이 존재할 경우 동작
        weak
        echo "※ 파일 권한을 400으로 설정하십시오. "
elif [ $pch2 != $p ];  then
        weak
        echo "※ 파일 소유자를 root로 설정하십시오. "
else
         # 권한이 모두 이상이 없을 때 동작
        good

fi

showEndline

#==============================================
showTitle "파일 및 디렉터리 관리 : /etc/rsyslog.conf 파일 소유자 및 권한 설정"

echo " "
echo "▶ 양 호 : /etc/rsyslog.conf의 파일 권한이 644 및 소유주가 root로 설정"
echo "▶ 취 약 : /etc/rsyslog.conf의 파일 권한이 644가 아니거나 소유자가 root가 아님"
echo " "

pch=`ls -l /etc/rsyslog.conf | cut -b 1-10` 
och="-rw-r--r--" # 적용되어야 될 권한 저장

pch2=`ls -l /etc/rsyslog.conf | cut -d " " -f3` 
p="root" # 적용되어야 될 소유권 저장

if [ $pch != $och ] && [ $pch2 != $p ]; then   
        weak
        echo "※ /etc/rsylog.con 권한을 644, 소유자를 root로 설정하십시오. "
elif [ $pch != $och ]; then
        weak
        echo "※ /etc/rsylog.con 권한을 644로 설정하십시오."
elif [ $pch2 != $p ];  then
        weak
        echo "※ /etc/rsylog.con 소유자를 root로 설정하십시오."
else
        good
fi

showEndline

#====================================================

showTitle "파일 및 디렉터리 관리 : 파일 및 디렉터리 소유자 설정"

echo ""
echo "▶ 양 호 : 소유주, 소유권 없는 파일.디렉터리가 없음 "
echo "▶ 취 약 : 소유주, 소유권 없는 파일.디렉터리가 존재 "
echo ""

Result=`find / -nouser -o -nogroup -print 2> /dev/null`

if [ -z $Result ]
then
        good
else
        weak
        echo "※ 소유쥬, 권한이 없는 파일, 디렉터리를 제거하세요."
fi

showEndline

#====================================================

showTitle "hosts.equiv 파일의 권한 설정"

echo " "
echo "▶ 양 호 : hosts.equiv 파일이 존재하지 않거나 권한이 400으로 설정"
echo "▶ 취 약 : hosts.equiv 파일이 존재하며 권한이 400으로 설정되지 않음"
echo " "

TARGET1=/etc/hosts.equiv
CHECK1=$(find /etc/ -name hosts.equiv -perm 400)
if [[ -e $TARGET1 ]]; then
        if [[ -n $CHECK1 ]]; then
                good
        else
                weak
                echo "※ $TARGET1 파일의 권한을 400으로 설정하십시오."
        fi
else
        good
fi

showEndline

#================================================

showTitle "파일 및 디렉터리 관리 : root홈, 패스 디렉터리 권한 및 패스 설정"

echo " "
echo "▶ 양 호 : PATH 환경변수의 중간 혹은 앞에 .가 포함"
echo "▶ 취 약 : PATH 환경변수의 중간 혹은 앞에 .가 포함되어 있지 않음"
echo " "

FRAME=$( echo $PATH | egrep "\.:|::|:.:" )

if [ -z $FRAME ]; then
        good
else
        weak
        echo "※ PATH 환경변수에 .이 포함되지 않도록 수정하십시오"
fi

showEndline

#===============================================

showTitle "파일 및 디렉터리 관리 : UMASK 설정 관리"

echo " "
echo "▶ 양 호 : /etc/profile, /etc/bashrc 파일의 umask 022"
echo "▶ 취 약 : /etc/profile, /etc/bashrc 파일의 umask 022 설정되지 않음"
echo " "

CHECK1=$(egrep 'umask 022' /etc/profile /etc/bashrc | wc -l)

if [[ 2 -eq $CHECK1 ]]; then
        good

else
        weak
        echo "※ /etc/profile, /etc/bashrc umask 022로 설정하십시오"
fi

showEndline

#===============================================



showTitle "/etc/(x)inetd.conf 파일의 쓰기 권한 설정"

echo " "
echo "▶ 양 호 : root가 아닌 대상에게 쓰기작업이 차단"
echo "▶ 취 약 : root가 아닌 대상에게 쓰기작업이 허용"
echo " "

CHECK1=`$(find /etc/xinetd* -type f -perm -2)`
if [[ -z $CHECK1 ]]; then
        good
else
        weak
        echo "※ root가 아닌 대상에 대한 쓰기 권한을 차단하십시오"
fi

showEndline

#===========================================

showTitle "서비스 관리 : crond 파일 소유자 및 권한 설정"

echo " "
echo "▶ 양 호 : cron 접근제어 파일 소유자 root, 권한이 640 이하"
echo "▶ 취 약 : 접근제어 파일 소유자가 root가 아니거나 권한이 640 초과"
echo " "

CHECK=$(find /etc -name "*cron.*" -type f -perm -2)
DENY=`ls -ld /etc/cron.deny  | cut -f "3" -d " " `
FILE=/etc/cron.allow

 if [[ -f "$FILE" ]]; then
        if [[ -z $CHECK ]]; then
                ALLOW=`ls -ld /etc/cron.allow | cut -f "3" -d " "`
                if [[ $DENY != "root" || $ALLOW != "root" ]]; then
                    weak
        echo "=> cron 접근 제어 파일 권한을 확인해 주십시오."
        for DIR in `find /etc -name "*cron.*" -type f`
        do
        echo `ls -ld $DIR`
        done
                else
                    good
                fi
        else
                   weak
        echo "※ cron 접근 제어 파일 권한을 확인해 주십시오."
        for DIR in `find /etc -name "*cron.*" -type f`
           do
              echo `ls -ld $DIR`
           done
        fi
else
        if [[ -z $CHECK && $DENY == "root" ]]; then
                good
         else
                weak
        echo "※ cron 접근 제어 파일 권한을 확인해 주십시오."
        for DIR in `find /etc -name "*cron.*" -type f`
           do
              echo `ls -ld $DIR`
           done
        fi
fi
showEndline

#===============================================

showTitle "서비스 관리 : DNS 보안 버전 패치"

echo " "
echo "▶ 양 호 : DNS가 최신 버전"
echo "▶ 취 약 : DNS가 이전 버전"
echo " "

newversion="9.11.4"
cversion=`named -v 2>/dev/null | awk -F " " '{print $2}' | cut -c1-6`

if [ -z $cversion ]; then
        weak
        echo "※ DNS 설치 해주십시오."

elif [ $cversion != $newversion ]; then
        weak
        echo "※ DNS를 최신 버전으로 설치해주십시오."
else
        good
fi

showEndline

#===============================================

showTitle "서비스 관리 : NFS 접근 통제"

echo " "
echo "▶ 양 호 : NFS 서비스 사용 시 everyone 공유 제한"
echo "▶ 취 약 : NFS 서비스 사용시  everyone 공유 제한을 하지 않음"
echo " "
CHECK1=`cat /etc/exports | grep '*'`
CHECK2=`cat /etc/exports | grep 'no_root_squash'`
CHECK3=`cat /etc/exports | grep 'no_all_squash'`
if [[ -z $CHECK1 && -z $CHECK2 && -z $CHECK3 ]]; then
   good
else
   weak
      echo "※ NFS 접근 허가의 보안 상태가 취약합니다."
      echo "※ /etc/fstab 파일을 확인하여 주십시오. ( *, no_root_sqaush, no_all_squash 제거 권고 )"

fi
showEndline

#===============================================

showTitle "서비스 관리 :  NFS 서비스 비활성화"

echo " "
echo " ▶ 양 호 : 불필요한 NFS 서비스 관련 데몬 비활성화"
echo " ▶ 취 약 : 불필요한 NFS 서비스 관련 데몬 활성화"
echo " "

CHECK1=$(ps -ef | egrep 'nfsd|statd|mountd' | grep -v pts)
FILE=`cat /etc/exports | cut -f 1 -d " " | xargs echo | sed 's/ /,/g'`
if [[ -z $CHECK1 ]]; then
   good   
else
   weak
       echo " "
        echo "    ※ NFS를 사용하지 않는 경우 서비스를  비활성화해 주십시오."
        echo "        pkill -9 {nfsd, statd. mountd}"
        echo "    ※ NFS 를 사용하지 않는 경우 사용하지 않는 공유를 제거하십시오."
        echo "        umount [디렉토리명]"
fi
showEndline


#===============================================

showTitle "패치 관리 : 최신 보안 패치 및 벤더 권고 사항 적용"
echo " "
echo " ▶ 양 호 : 주기적으로 보안 패치 및 벤더 권고사항을 적용"
echo " ▶ 취 약 : 주기적으로 보안 패치 및 벤더 권고사항을 적용하지 않음"
echo " "
 echo -e "\033[1;32m>>>>>>>>>>>>>>>>>>>>>>> 설 치 된   보 안 패 치 확 인 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  $pch\033[0m"
echo " "
echo "※ 최신 보안 패치를 확인하시고 보안 패치 업그레이드를 진행해 주십시오. "
echo ""
echo "<현재 보안 패치 버전 확인>"
yum updateinfo list security all
echo ""
showEndline

#===============================================

showTitle "로그 관리 : 로그의 정기적 검토 및 보고"

echo " "
echo  " ▶ 양 호 : 정기적으로 로그 기록에 대한 검토, 분석, 리포트 작성 및 보고 등의 조치가 이루어짐"
echo  " ▶ 취 약 : 로그 기록에 대한 검토, 분석, 리포트 작성 및 보고 등의 조치가 이루어지지 않음"
echo " "

echo -e "\033[1;32m>>>>>>>>>>>>>>>>>>>>>>   로 그 백 업 이   완 료 되 었 습 니 다   <<<<<<<<<<<<<<<<<<<<<<<<<<<<< \033[0m"
echo " "

DIR=`find / -name LOG -type d`

if [[ -z $DIR ]]; then
        mkdir /LOG
        TAR=`tar cfzP /LOG/log.$(date '+%Y-%m-%d').tar.gz /var/log/*`
         DEL=`find /LOG/ -name "*.tgz" -mtime +4 -delete`
        $TAR
        $DEL
        ls -l /LOG
else
        $TAR
        $DEL
        ls -ld /LOG/*log*
fi



}




#########################################################함수 영역################### #########################################

echo " "
sleep 2
clear

#Mail Sending

echo "이메일, EC2 업로드 중.."
echo "잠시 기다려주세요 .."
sending  > Security_List.txt
clear


showEndline
showTitle "점검 결과 보고서 이메일 전송"
EMAIL="wjscodus95@nate.com"


YUM=`yum -y install mailx 2> /dev/null`
YUM_CHECK=`rpm -qa | grep mailx 2> /dev/null`

if [[ -z $YUM_CHECK ]]; then
        $YUM
         `mail -a Security_List.txt -s “Security_List” $EMAIL < Security_List.txt`
else
         `mail -a Security_List.txt -s “Security_List” $EMAIL < Security_List.txt`

fi

echo " "
echo -e "\033[1;32m>>>>>>>>>>>>>>>>>>>>>>   메 일 이  전 송 되 었 습 니 다    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< \033[0m"
echo ""
echo "    - $EMAIL 로 점검 결과 보고서를 전송하였습니다."
echo "       ※ 메일 미전송시 스팸메일함을 확인하여 주십시오"
echo ""

showEndline
#EC2 Upload


showTitle "점검 결과 EC2 업로드"
aws_pr_ip=13.125.154.161
echo -e "\033[1;32m>>>>>>>>>>>>>>>>>>>>>>  E C 2 업 로 드 완 료 되 었 습 니 다   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< \033[0m"
scp -i ./group1.pem Security_List.txt  ec2-user@$aws_pr_ip:/report


showEndline